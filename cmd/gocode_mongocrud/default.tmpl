{{define "Store"}}
import "go.mongodb.org/mongo-driver/mongo"

// Store has overall connection information shared by each specific type's store.
type Store struct {
	client *mongo.Client // mongo client
	dbName string // default mongo database name
}
{{end}}

{{define "StoreMethods"}}
import "errors"
import "reflect"
import "strings"
import "fmt"
import "go.mongodb.org/mongo-driver/mongo"
import "go.mongodb.org/mongo-driver/bson"
import "go.mongodb.org/mongo-driver/bson/primitive"

// NewStore returns an initialized Store instance.
func NewStore(client *mongo.Client, dbName string) (*Store, error) {
	if dbName == "" {
		return nil, errors.New("dbName is required")
	}
	ret := Store {
		client: client, 
		dbName: dbName,
	}
	return &ret, nil
}

func (s *Store) db() *mongo.Database {
	return s.client.Database(s.dbName)
}

// ErrNotFound provides an explicit type for the not found case,
// intended to wrap database-specific error(s).
type ErrNotFound struct {
	Err error
}

// Error implements the error interface.
func (e *ErrNotFound) Error() string {
	if e.Err == nil {
		return "not found"
	}
	return "not found: " + e.Err.Error()
}

// Unwrap supports error wrapping.
func (e *ErrNotFound) Unwrap() error { return e.Err }

// Is returns true if the specified error is also a *ErrNotFound
func (e *ErrNotFound) Is(err error) bool {
	_, ok := err.(*ErrNotFound)
	return ok
}

// HTTPStatusCode tells HTTP handler methods that 404 is the status corresponding to this error.
// Individual handlers can decide to honor this and send back in response or not.
func (e *ErrNotFound) HTTPStatusCode() int {
	return 404
}

func derefedType(o interface{}) reflect.Type {
	tv := reflect.ValueOf(o)
	for tv.Kind() == reflect.Ptr {
		tv = tv.Elem()
	}
	return tv.Type()
}

// isValidMongoOp returns true if the string is one of the operators we allow when querying
func isValidMongoOp(v string) bool {
	switch v {
	case "$eq", "$gt", "$gte", "$lt", "$lte", "$in", "$ne", "$nin", // usual binary operators
		"$and", "$not", "$nor", "$or", // boolean
		"$mod", "$exists", "$type", "$all", "$size": // other
		return true
	}
	return false
}

// bsonField returns the field with a bson struct tag with the name v in type t.
// t must correspond to a struct type.  Returns nil if not found
func bsonField(t reflect.Type, v string) *reflect.StructField {
	for i := 0; i < t.NumField(); i++ {
		f := t.Field(i)
		bsonName := strings.SplitN(f.Tag.Get("bson"), ",", 2)[0]
		if bsonName == "" || bsonName == "-" {
			continue
		}
		if bsonName == v {
			return &f
		}
	}
	return nil
}

func mongoFixInputValue(v interface{}, t reflect.Type, k string) (interface{}, error) {
	bf := bsonField(t, k)
	if bf == nil {
		return nil, fmt.Errorf("invalid field name %q", k)
	}
	var id primitive.ObjectID
	if bf.Type.AssignableTo(reflect.TypeOf(id)) {
		id, err := primitive.ObjectIDFromHex(fmt.Sprint(v))
		return id, err
	}
	return v, nil
}

// mongoSort returns a bson.D appropriate for a mongo query given the specified input.
// sort indicates the sorting and o is the object to check for fields on.
// The sort can either be a slice of strings, or a slice of map[string]interface{},
// with the values being either 1 or -1 (float64 or int underlying type).
// Note that each map must only contain a single entry - this is due to the fact that
// maps in Go do not have an explicit order.
// Any other input varation will error.
func mongoSort(sort []interface{}, o interface{}) (ret bson.D, err error) {

	typo := derefedType(o)

	ret = make(bson.D, 0, len(sort))

	for _, v := range sort {
		switch vt := v.(type) {
		case string: // string by itself means sort ascending
			if bsonField(typo, vt) == nil {
				return nil, fmt.Errorf("invalid field name %q", v)
			}
			ret = append(ret, primitive.E{Key:vt, Value:1})
		case map[string]interface{}:
			if len(vt) != 1 {
				return nil, fmt.Errorf("entries for sort order must have exactly one key, found %d instead", len(vt))
			}
			for k, n := range vt {
				if bsonField(typo, k) == nil {
					return nil, fmt.Errorf("invalid field name %q", k)
				}
				ns := fmt.Sprint(n)
				switch ns {
				case "1":
					ret = append(ret, primitive.E{Key:k, Value:1})
				case "-1":
					ret = append(ret, primitive.E{Key:k, Value:-1})
				default:
					return nil, fmt.Errorf("invalid sort order %q for field %q", ns, k)
				}
			}
		default:
			return nil, fmt.Errorf("unknown type %T found in sort order", v)
		}
	}

	return ret, nil
}

// mongoFilter returns a value appropriate for a mongo query given the specified input.
// The filter must be a map with field names as keys and the values must be either appropriate
// primitive types or another map with a supported operator.  This simplification of the mongo
// query syntax allows us to vet the input as well as handle type conversions for field types
// that don't have a corresponding JSONizable representation.
// isValidMongoOp and bsonField are used to verify map keys and thus avoid allowing
// unintended functionality.
// o is the object to check for fields against.
func mongoFilter(filter map[string]interface{}, o interface{}) (ret bson.D, err error) {

	typo := derefedType(o)

	ret = make(bson.D, 0, len(filter)) // mongo driver barfs with nil bson.D

floop:
	for k, v := range filter {
		if bsonField(typo, k) == nil {
			return nil, fmt.Errorf("invalid filter key %q", k)
		}
		switch tv := v.(type) {
		case float64, float32, int, int32, int64, string:
			v2, err := mongoFixInputValue(v, typo, k)
			if err != nil {
				return nil, err
			}
			ret = append(ret, bson.E{Key:k, Value:v2})
			continue floop
		case map[string]interface{}:
			if len(tv) != 1 {
				return nil, fmt.Errorf("nested maps must only have one entry, key %q", k)
			}
			for subk, subv := range tv { // executes exactly once
				if !isValidMongoOp(subk) {
					return nil, fmt.Errorf("invalid key %q.%q in nesetd map", k, subk)
				}
				switch subvv := subv.(type) {
				case float64, float32, int, int32, int64, string:
					v2, err := mongoFixInputValue(subvv, typo, subk)
					if err != nil {
						return nil, err
					}
					ret = append(ret, bson.E{Key:k, Value:bson.D{bson.E{Key:subk, Value:v2}}})
					continue floop
				}
			}
		}
	}

	return ret, nil
}

{{end}}

{{define "TestStore"}}
import (
	"testing"
	"fmt"
	"context"
    "os/exec"
	"bytes"
	"strings"
	"strconv"
	"math/rand"
	"time"

	"go.mongodb.org/mongo-driver/mongo/options"
	"go.mongodb.org/mongo-driver/mongo"
)

// TestMain starts a shared mongodb docker container for the rest of the tests in this package to use.
func TestMain(m *testing.M) {

	testMongo = startMongo(nil)
	defer testMongo.Close()

	m.Run()

	// don't call os.Exit here because we want the defer to run
	return
}

func newTestStore(t *testing.T) *Store {

	c, err := mongo.NewClient(options.Client().ApplyURI(testMongo.URI()))
	if err != nil {
		t.Fatal(err)
	}
	ctx, cancel := context.WithTimeout(context.Background(), 20*time.Second)
	defer cancel()
	err = c.Connect(ctx)
	if err != nil {
		t.Fatal(err)
	}

	store, err := NewStore(c, testMongo.DB(t))
	if err != nil {
		t.Fatal(err)
	}
	return store
}

var testMongo *tmongo

type tmongo struct {
	uri string
	dockerID string
}

// URI returns the MongoDB connection URI.
func (tm *tmongo) URI() string {
	return tm.uri
}

// DB returns a new database name.
func (tm *tmongo) DB(t *testing.T) string {
	return "gotest_"+strconv.FormatUint(rand.Uint64(), 16)
}

func (tm *tmongo) Close() error {
	cmd := exec.Command("docker", "stop", tm.dockerID)
	b, err := cmd.CombinedOutput()
	if len(bytes.TrimSpace(b)) > 0 {
		fmt.Printf("docker stop output:\n%s", b)
	}
	return err
}

func startMongo(t *testing.T) *tmongo {
	// TODO: it would be better if while it was downloading the image, etc. that output piped through so user can see
	// TODO: figure out automatically select a free port
	cmd := exec.Command("docker", "run", "--rm", "-d", "-p", "37017:27017", "-e" , "MONGO_INITDB_ROOT_USERNAME=root", "-e", "MONGO_INITDB_ROOT_PASSWORD=gotest", "mongo:latest")
	b, err := cmd.CombinedOutput()
	if err != nil {
		if t != nil {
			t.Fatal(err)
		}
		panic(err)
	}
	dockerID := strings.TrimSpace(string(b))
	
	return &tmongo {
		uri: "mongodb://root:gotest@localhost:37017",
		dockerID: dockerID,
	}
}
{{end}}

{{define "TYPEStore"}}
import "go.mongodb.org/mongo-driver/bson/primitive"

{{/* FIXME: import fix hack for now, until we add whatever's needed so we can understand
the types used in the original TYPE struct declaration */}}
func tmpImportFix{{$.Struct.LocalName}}() { _ = primitive.ObjectID{} }

// {{$.Struct.LocalName}}Store has mongodb storage methods for this type.
type {{$.Struct.LocalName}}Store struct {
	*Store // embed store for easy access
}
{{end}}

{{define "TYPEStoreMethods"}}
import "go.mongodb.org/mongo-driver/mongo"
import "go.mongodb.org/mongo-driver/mongo/options"

// {{$.Struct.LocalName}} returns a {{$.Struct.LocalName}}Store for accessing this type.
func (s *Store) {{$.Struct.LocalName}}() *{{$.Struct.LocalName}}Store {
	return &{{$.Struct.LocalName}}Store{Store:s}
}

// col returns the collection for this type with any options
func (s *Store) col(opts ...*options.CollectionOptions) *mongo.Collection {
	return s.db().Collection("{{$.Struct.LocalName}}", opts...)
}

{{/* following are not TYPEStore methods but it seems the best place to put this stuff for now */}}

// {{$.Struct.LocalName}}List is a slice of {{$.Struct.QName}} with relevant methods.
type {{$.Struct.LocalName}}List []{{$.Struct.QName}}

// {{$.Struct.LocalName}}Result implements {{$.Struct.LocalName}}Resulter by adding
// to the slice.
func (l *{{$.Struct.LocalName}}List) {{$.Struct.LocalName}}Result(o {{$.Struct.QName}}) error {
	*l = append(*l, o)
	return nil
}

{{/* NOTE: Resulters get their result passeed by value so the caller doesn't hang onto
a pointer to an instance that might be overwritten; and it provides allocation optimization
opportunities. */}}
// {{$.Struct.LocalName}}Resulter can receive {{$.Struct.QName}} instances as they 
// are streamed from the underlying data source.
type {{$.Struct.LocalName}}Resulter interface {
	{{$.Struct.LocalName}}Result({{$.Struct.QName}}) error
}

// {{$.Struct.LocalName}}ResulterFunc allows implementation of {{$.Struct.QName}}Resulter as a function.
type {{$.Struct.LocalName}}ResulterFunc func(o {{$.Struct.QName}}) error

// {{$.Struct.LocalName}}ResulterFunc implements {{$.Struct.LocalName}}Resulter by calling f.
func (f {{$.Struct.LocalName}}ResulterFunc) {{$.Struct.LocalName}}Result(o {{$.Struct.QName}}) error {
	return f(o)
}

{{end}}

{{define "TYPEInsert"}}
import "context"
import "reflect"
import "go.mongodb.org/mongo-driver/bson"
import "go.mongodb.org/mongo-driver/bson/primitive"

// Insert will insert a record.
func (s *{{$.Struct.LocalName}}Store) Insert(ctx context.Context, o *{{$.Struct.QName}}) error {
	{{$idf := index $.Struct.FieldList.PK 0}}
	if reflect.ValueOf(o.{{$idf.GoName}}).IsZero() {
		o.{{$idf.GoName}} = primitive.NewObjectID()
	}
	_, err := s.col().InsertOne(ctx, o)
	return err
}
{{end}}

{{define "TYPEDelete"}}
import "context"
import "go.mongodb.org/mongo-driver/bson"

// Delete removes a the indicated record.
func (s *{{$.Struct.LocalName}}Store) Delete(ctx context.Context, {{range $.Struct.FieldList.PK}}v{{.GoName}} {{.GoTypeExpr}},{{end}}) error {
	_, err := s.col().DeleteOne(ctx, bson.D{ {{range $.Struct.FieldList.PK}}
		{"{{.BSONName}}", v{{.GoName}}},
	{{end}}
    })
	if err != nil && errors.Is(err, mongo.ErrNoDocuments) {
		err = &ErrNotFound{Err: err}
	}
	return err
}
{{end}}

{{define "TYPEUpdate"}}
import "context"
import "go.mongodb.org/mongo-driver/bson"
import "go.mongodb.org/mongo-driver/bson/primitive"

// Update overwrites an existing record.
func (s *{{$.Struct.LocalName}}Store) Update(ctx context.Context, o *{{$.Struct.QName}}) error {
	{{$idf := index $.Struct.FieldList.PK 0}}
	_, err := s.col().UpdateOne(ctx,
		bson.D{ {{range $.Struct.FieldList.PK}}
			{"{{.BSONName}}", o.{{.GoName}}},
		{{end}} },
		bson.D{ {"$set", o} },
	)
	if err != nil && errors.Is(err, mongo.ErrNoDocuments) {
		err = &ErrNotFound{Err: err}
	}
	return err
}
{{end}}

{{define "TYPESelectByID"}}
import "context"
import "errors"
import "go.mongodb.org/mongo-driver/bson"
import "go.mongodb.org/mongo-driver/mongo"

// SelectByID returns the matching record by primary key.
func (s *{{$.Struct.LocalName}}Store) SelectByID(ctx context.Context, {{range $.Struct.FieldList.PK}}v{{.GoName}} {{.GoTypeExpr}},{{end}}) (*{{$.Struct.QName}}, error) {
	var ret {{$.Struct.QName}}
	err := s.col().FindOne(ctx, bson.D{ {{range $.Struct.FieldList.PK}}
		{"{{.BSONName}}", v{{.GoName}}},
	{{end}}
    }).Decode(&ret)
	if err != nil && errors.Is(err, mongo.ErrNoDocuments) {
		err = &ErrNotFound{Err: err}
	}
	return &ret, err
}
{{end}}

{{define "TYPESelect"}}
import "errors"
import "log"

var _ log.Logger  // tmp

// Select runs the indicated query and loads it's return into result.
// TODO: explain args
// Note that for more complex query needs it is recommended you add a custom select function
// instead of trying to adapt this one to every use case.
func (s *{{$.Struct.LocalName}}Store) Select(ctx context.Context, offset, limit int64, critiera map[string]interface{}, orderBy []interface{}, result {{$.Struct.QName}}Resulter) error {

	if result == nil {
		return errors.New("result must not be nil")
	}

	var v {{$.Struct.LocalName}}

	filter, err := mongoFilter(critiera, &v)
	if err != nil {
		return err
	}
	sort, err := mongoSort(orderBy, &v)
	if err != nil {
		return err
	}

	cursor, err := s.col().Find(ctx, filter, &options.FindOptions{ Limit: &limit, Skip: &offset, Sort: sort })
	if err != nil {
		return err
	}
	defer cursor.Close(ctx)

	for cursor.Next(ctx) {
		v = {{$.Struct.LocalName}} {}
		err := cursor.Decode(&v)
		if err != nil {
			return err
		}
		err = result.{{$.Struct.LocalName}}Result(v)
		if err != nil {
			return err
		}
	}

	return cursor.Err()
}
{{end}}

{{define "TYPESelectCursor"}}
// SelectCursor is similar to Select but instead of specifying an offset and limit it uses a cursor.
// Useful for iterating over large datasets where computing the total size or 
// Note that for more complex query needs it is recommended you add a custom select function
// instead of trying to adapt this one to every use case.
func (s *{{$.Struct.LocalName}}Store) SelectCursor(ctx context.Context, limit int64, cursor []interface{}, critiera map[string]interface{}, orderBy []interface{}, result {{$.Struct.QName}}Resulter) (nextCursor []interface{}, e error) {

	// TODO: we should probably implement this on top of Select()
	// $and the cursor to the query if present
	// collect the last record's field values and return as cursor
	panic("TODO")
	
}
{{end}}

{{define "TYPECount"}}
// Count returns the count of the result of the indicated query.
func (s *{{$.Struct.LocalName}}Store) Count(ctx context.Context, critiera map[string]interface{}) (int64, error) {
	var v {{$.Struct.LocalName}}
	filter, err := mongoFilter(critiera, &v)
	if err != nil {
		return 0, err
	}
	return s.col().CountDocuments(ctx, filter)
}
{{end}}

{{define "TestTYPE"}}
import "testing"
import "context"
import "errors"

func Test{{$.Struct.LocalName}}CRUD(t *testing.T) {
	
	{{$idf := index $.Struct.FieldList.PK 0}}

	store := newTestStore(t)
	ctx := context.Background()

	o := {{$.Struct.LocalName}}{}
	err := store.{{$.Struct.LocalName}}().Insert(ctx, &o)
	if err != nil {
		t.Fatal(err)
	}
	id := o.{{$idf.GoName}}

	t.Logf("ObjectID: %v", id)

	o2, err := store.{{$.Struct.LocalName}}().SelectByID(ctx, id)
	if err != nil {
		t.Fatal(err)
	}
	if o.{{$idf.GoName}} != o2.{{$idf.GoName}} {
		t.Errorf("mismatched IDs, expected: %v, actual: %v", o.{{$idf.GoName}}, o2.{{$idf.GoName}})
	}

	err = store.{{$.Struct.LocalName}}().Update(ctx, o2)
	if err != nil {
		t.Fatal(err)
	}

	err = store.{{$.Struct.LocalName}}().Delete(ctx, id)
	if err != nil {
		t.Fatal(err)
	}

	_, err = store.{{$.Struct.LocalName}}().SelectByID(ctx, id)
	var errNotFound *ErrNotFound
	if !(err != nil && errors.As(err, &errNotFound)) {
		t.Errorf("unexpected select result after delete: %v", err)
	}

}

func Test{{$.Struct.LocalName}}Select(t *testing.T) {
	
	{{$idf := index $.Struct.FieldList.PK 0}}

	store := newTestStore(t)
	ctx := context.Background()
	var err error
	var result {{$.Struct.LocalName}}List

	var records [5]{{$.Struct.LocalName}}
	for i := range records {
		records[i] = {{$.Struct.LocalName}}{}
		err := store.{{$.Struct.LocalName}}().Insert(ctx, &records[i])
		if err != nil {
			t.Fatal(err)
		}
	}

	result = nil
	err = store.{{$.Struct.LocalName}}().Select(ctx, 0, 2, nil, []interface{}{"_id"}, &result)
	if err != nil {
		t.Fatal(err)
	}
	if len(result) != 2 {
		t.Errorf("unexpected result length %d", len(result))
	}

	result = nil
	err = store.{{$.Struct.LocalName}}().Select(ctx, 0, 0, nil, []interface{}{"_id"}, &result)
	if err != nil {
		t.Fatal(err)
	}
	if len(result) != 5 {
		t.Errorf("unexpected result length %d", len(result))
	}


}

{{end}}
